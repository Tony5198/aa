BST insertion traversal
#include<stdio.h>
#include<stdlib.h>

typedef struct BST
{
    int data;
    struct BST *left;
    struct BST *right;
}node;

node *create();
void insert(node *,node *);
void preorder(node *);

int main()
{
    char ch;
    node *root=NULL,*temp;

    do
    {
        temp=create();
        if(root==NULL)
            root=temp;
        else
            insert(root,temp);

        printf("nDo you want to enter more(y/n)?");
        getchar();
        scanf("%c",&ch);
    }while(ch=='y'|ch=='Y');

    printf("nPreorder Traversal: ");
    preorder(root);
    return 0;
}

node *create()
{
    node *temp;
    printf("nEnter data:");
    temp=(node*)malloc(sizeof(node));
    scanf("%d",&temp->data);
    temp->left=temp->right=NULL;
    return temp;
}

void insert(node *root,node *temp)
{
    if(temp->data<root->data)
    {
        if(root->left!=NULL)
            insert(root->left,temp);
        else
            root->left=temp;
    }

    if(temp->data>root->data)
    {
        if(root->right!=NULL)
            insert(root->right,temp);
        else
            root->right=temp;
    }
}

void preorder(node *root)
{
    if(root!=NULL)
    {
        printf("%d ",root->data);
        preorder(root->left);
        preorder(root->right);
    }
}
void postorder(node *root)
{
    if(root!=NULL)
    {
        printf("%d ",root->left);
        preorder(root->right);
        preorder(root->data);
    }

}
void inorder(node *root)
{
    if(root!=NULL)
    {
        printf("%d ",root->left);
        preorder(root->data);
        preorder(root->right);
    }
}
-----------------------------------
MAX
#include <stdio.h>
#include<conio.h>


int a[100], n,ptr,par;
main()
{
   insert(4);
   insert(3);
   insert(1);
   insert(6);
   display();
   delete();
     display();
}



insert(int v)
{
n=n+1;
ptr=n;
while(ptr>1)
{
par=ptr/2;
if(v<a[par])
{
    a[ptr]=v;
    return;
}
a[ptr]=a[par];
ptr=par;
}
a[1]=v;
}

display()
{
    int i=0;
    for(i=1;i<=n;i++)
    {
        printf("%d",a[i]);
    }
}

delete()
{
int item=0,left,right,last;
item=a[1];
last=a[n];
n=n-1;
ptr=1,left=2,right=3;
while(right<=n)
{

    if(last>a[left] && last>a[right])
    {
        a[ptr]=last;
        return;
    }
    if(a[right]<a[left])
    {
        a[ptr]=a[left];
        ptr=left;
    }
    else
    {
        a[ptr]=a[right];
        ptr=right;
    }
    left=2*ptr;
    right=left+1;

}
if(left==n && last<a[left])
{
    a[ptr]=a[left];
    ptr=left;
}
a[ptr]=last;
}
---------------------------------------
MIN
#include <stdio.h>
#include<conio.h>


int a[100], n,ptr,par;
main()
{
   insert(4);
   insert(3);
   insert(1);
   insert(6);
   display();
   delete();
   display();
}



insert(int v)
{
n=n+1;
ptr=n;
while(ptr>1)
{
par=ptr/2;
if(v>a[par])
{
    a[ptr]=v;
    return;
}
a[ptr]=a[par];
ptr=par;
}
a[1]=v;
}

display()
{
    int i=0;
    for(i=1;i<=n;i++)
    {
        printf("%d",a[i]);
    }
}

delete()
{
int item=0,left,right,last;
item=a[1];
last=a[n];
n=n-1;
ptr=1,left=2,right=3;
while(right<=n)
{

    if(last<a[left] && last<a[right])
    {
        a[ptr]=last;
        return;
    }
    if(a[right]>a[left])
    {
        a[ptr]=a[left];
        ptr=left;
    }
    else
    {
        a[ptr]=a[right];
        ptr=right;
    }
    left=2*ptr;
    right=left+1;

}
if(left==n && last>a[left])
{
    a[ptr]=a[left];
    ptr=left;
}
a[ptr]=last;
}
---------HEAP SORT----------------
#include<stdio.h>

void create(int []);
void down_adjust(int [],int);

void main()
{
    int heap[30],n,i,last,temp;
    printf("Enter no. of elements:");
    scanf("%d",&n);
    printf("\nEnter elements:");
    for(i=1;i<=n;i++)
        scanf("%d",&heap[i]);

    //create a heap
    heap[0]=n;
    create(heap);

    //sorting
    while(heap[0] > 1)
    {
        //swap heap[1] and heap[last]
        last=heap[0];
        temp=heap[1];
        heap[1]=heap[last];
        heap[last]=temp;
        heap[0]--;
        down_adjust(heap,1);
    }

    //print sorted data
    printf("\nArray after sorting:\n");
    for(i=1;i<=n;i++)
        printf("%d ",heap[i]);
}

void create(int heap[])
{
    int i,n;
    n=heap[0]; //no. of elements
    for(i=n/2;i>=1;i--)
        down_adjust(heap,i);
}

void down_adjust(int heap[],int i)
{
    int j,temp,n,flag=1;
    n=heap[0];

    while(2*i<=n && flag==1)
    {
        j=2*i;    //j points to left child
        if(j+1<=n && heap[j+1] > heap[j])
            j=j+1;
        if(heap[i] > heap[j])
            flag=0;
        else
        {
            temp=heap[i];
            heap[i]=heap[j];
            heap[j]=temp;
            i=j;
        }
    }
}